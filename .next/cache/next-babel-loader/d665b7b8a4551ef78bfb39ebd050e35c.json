{"ast":null,"code":"{\n  /*Products API end point */\n}\nimport Product from \"../../models/Product\";\nimport connectDb from \"../../utils/connectDb\";\nconnectDb(); //make sure to have a connection to the database before try to make a request\n//Method to handle get/delete and sent it to the appropriate function\n\nexport default (async (req, res) => {\n  switch (req.method) {\n    case \"GET\":\n      await handleGetRequest(req, res);\n      break;\n\n    case \"POST\":\n      await handlePostRequest(req, res);\n      break;\n\n    case \"DELETE\":\n      await handleDeleteRequest(req, res);\n      break;\n\n    default:\n      res.status(405).send(`Method ${req.method} not allowed`);\n      break;\n  }\n}); //Get request\n\nasync function handleGetRequest(req, res) {\n  const {\n    _id\n  } = req.query; //get id from the requested data\n\n  const product = await Product.findOne({\n    _id\n  }); //Find product according to its ID\n\n  res.status(200).json(product);\n}\n\nasync function handlePostRequest(req, res) {\n  const {\n    name,\n    price,\n    description,\n    mediaUrl\n  } = req.body; //If any of the product value/fields is missing, the user will get a warning message, otherwise user can proceed to create new product\n\n  if (!name || !price || !description || !mediaUrl) {\n    return res.status(422).send(\"Product missing one or more fields\");\n  }\n\n  const product = await new Product({\n    name,\n    price,\n    description,\n    mediaUrl\n  }).save();\n  res.status(201).json(product);\n} //Delete request\n\n\nasync function handleDeleteRequest(req, res) {\n  const {\n    _id\n  } = req.query;\n  await Product.findOneAndDelete({\n    _id\n  });\n  res.status(204).json({});\n}","map":{"version":3,"sources":["C:/Users/User/Desktop/16. Upload Product Image, Post Product/pages/api/product.js"],"names":["Product","connectDb","req","res","method","handleGetRequest","handlePostRequest","handleDeleteRequest","status","send","_id","query","product","findOne","json","name","price","description","mediaUrl","body","save","findOneAndDelete"],"mappings":"AAAA;AAAC;AAA4B;AAC7B,OAAOA,OAAP,MAAoB,sBAApB;AACA,OAAOC,SAAP,MAAsB,uBAAtB;AAEAA,SAAS,G,CAAI;AAEb;;AACA,gBAAe,OAAOC,GAAP,EAAYC,GAAZ,KAAoB;AACjC,UAAQD,GAAG,CAACE,MAAZ;AACE,SAAK,KAAL;AACE,YAAMC,gBAAgB,CAACH,GAAD,EAAMC,GAAN,CAAtB;AACA;;AACF,SAAK,MAAL;AACE,YAAMG,iBAAiB,CAACJ,GAAD,EAAMC,GAAN,CAAvB;AACA;;AACF,SAAK,QAAL;AACE,YAAMI,mBAAmB,CAACL,GAAD,EAAMC,GAAN,CAAzB;AACA;;AACF;AACEA,MAAAA,GAAG,CAACK,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAsB,UAASP,GAAG,CAACE,MAAO,cAA1C;AACA;AAZJ;AAcD,CAfD,E,CAiBA;;AACA,eAAeC,gBAAf,CAAgCH,GAAhC,EAAqCC,GAArC,EAA0C;AACxC,QAAM;AAAEO,IAAAA;AAAF,MAAUR,GAAG,CAACS,KAApB,CADwC,CACb;;AAC3B,QAAMC,OAAO,GAAG,MAAMZ,OAAO,CAACa,OAAR,CAAgB;AAAEH,IAAAA;AAAF,GAAhB,CAAtB,CAFwC,CAEQ;;AAChDP,EAAAA,GAAG,CAACK,MAAJ,CAAW,GAAX,EAAgBM,IAAhB,CAAqBF,OAArB;AACD;;AAED,eAAeN,iBAAf,CAAiCJ,GAAjC,EAAsCC,GAAtC,EAA2C;AACzC,QAAM;AAAEY,IAAAA,IAAF;AAAQC,IAAAA,KAAR;AAAeC,IAAAA,WAAf;AAA4BC,IAAAA;AAA5B,MAAyChB,GAAG,CAACiB,IAAnD,CADyC,CAEzC;;AACA,MAAI,CAACJ,IAAD,IAAS,CAACC,KAAV,IAAmB,CAACC,WAApB,IAAmC,CAACC,QAAxC,EAAkD;AAChD,WAAOf,GAAG,CAACK,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB,oCAArB,CAAP;AACD;;AACD,QAAMG,OAAO,GAAG,MAAM,IAAIZ,OAAJ,CAAY;AAChCe,IAAAA,IADgC;AAEhCC,IAAAA,KAFgC;AAGhCC,IAAAA,WAHgC;AAIhCC,IAAAA;AAJgC,GAAZ,EAKnBE,IALmB,EAAtB;AAMAjB,EAAAA,GAAG,CAACK,MAAJ,CAAW,GAAX,EAAgBM,IAAhB,CAAqBF,OAArB;AACD,C,CAED;;;AACA,eAAeL,mBAAf,CAAmCL,GAAnC,EAAwCC,GAAxC,EAA6C;AAC3C,QAAM;AAAEO,IAAAA;AAAF,MAAUR,GAAG,CAACS,KAApB;AACA,QAAMX,OAAO,CAACqB,gBAAR,CAAyB;AAAEX,IAAAA;AAAF,GAAzB,CAAN;AACAP,EAAAA,GAAG,CAACK,MAAJ,CAAW,GAAX,EAAgBM,IAAhB,CAAqB,EAArB;AACD","sourcesContent":["{/*Products API end point */}\nimport Product from \"../../models/Product\";\nimport connectDb from \"../../utils/connectDb\";\n\nconnectDb(); //make sure to have a connection to the database before try to make a request\n\n//Method to handle get/delete and sent it to the appropriate function\nexport default async (req, res) => {\n  switch (req.method) {\n    case \"GET\":\n      await handleGetRequest(req, res);\n      break;\n    case \"POST\":\n      await handlePostRequest(req, res);\n      break;\n    case \"DELETE\":\n      await handleDeleteRequest(req, res);\n      break;\n    default:\n      res.status(405).send(`Method ${req.method} not allowed`);\n      break;\n  }\n};\n\n//Get request\nasync function handleGetRequest(req, res) {\n  const { _id } = req.query; //get id from the requested data\n  const product = await Product.findOne({ _id }); //Find product according to its ID\n  res.status(200).json(product);\n}\n\nasync function handlePostRequest(req, res) {\n  const { name, price, description, mediaUrl } = req.body;\n  //If any of the product value/fields is missing, the user will get a warning message, otherwise user can proceed to create new product\n  if (!name || !price || !description || !mediaUrl) {\n    return res.status(422).send(\"Product missing one or more fields\");\n  }\n  const product = await new Product({\n    name,\n    price,\n    description,\n    mediaUrl\n  }).save();\n  res.status(201).json(product);\n}\n\n//Delete request\nasync function handleDeleteRequest(req, res) {\n  const { _id } = req.query;\n  await Product.findOneAndDelete({ _id });\n  res.status(204).json({});\n}\n"]},"metadata":{},"sourceType":"module"}